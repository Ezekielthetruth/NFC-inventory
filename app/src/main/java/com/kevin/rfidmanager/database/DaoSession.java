package com.kevin.rfidmanager.database;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.kevin.rfidmanager.database.Items;
import com.kevin.rfidmanager.database.Users;
import com.kevin.rfidmanager.database.KeyDescription;
import com.kevin.rfidmanager.database.ImagesPath;
import com.kevin.rfidmanager.database.SaleInfo;

import com.kevin.rfidmanager.database.ItemsDao;
import com.kevin.rfidmanager.database.UsersDao;
import com.kevin.rfidmanager.database.KeyDescriptionDao;
import com.kevin.rfidmanager.database.ImagesPathDao;
import com.kevin.rfidmanager.database.SaleInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig itemsDaoConfig;
    private final DaoConfig usersDaoConfig;
    private final DaoConfig keyDescriptionDaoConfig;
    private final DaoConfig imagesPathDaoConfig;
    private final DaoConfig saleInfoDaoConfig;

    private final ItemsDao itemsDao;
    private final UsersDao usersDao;
    private final KeyDescriptionDao keyDescriptionDao;
    private final ImagesPathDao imagesPathDao;
    private final SaleInfoDao saleInfoDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        itemsDaoConfig = daoConfigMap.get(ItemsDao.class).clone();
        itemsDaoConfig.initIdentityScope(type);

        usersDaoConfig = daoConfigMap.get(UsersDao.class).clone();
        usersDaoConfig.initIdentityScope(type);

        keyDescriptionDaoConfig = daoConfigMap.get(KeyDescriptionDao.class).clone();
        keyDescriptionDaoConfig.initIdentityScope(type);

        imagesPathDaoConfig = daoConfigMap.get(ImagesPathDao.class).clone();
        imagesPathDaoConfig.initIdentityScope(type);

        saleInfoDaoConfig = daoConfigMap.get(SaleInfoDao.class).clone();
        saleInfoDaoConfig.initIdentityScope(type);

        itemsDao = new ItemsDao(itemsDaoConfig, this);
        usersDao = new UsersDao(usersDaoConfig, this);
        keyDescriptionDao = new KeyDescriptionDao(keyDescriptionDaoConfig, this);
        imagesPathDao = new ImagesPathDao(imagesPathDaoConfig, this);
        saleInfoDao = new SaleInfoDao(saleInfoDaoConfig, this);

        registerDao(Items.class, itemsDao);
        registerDao(Users.class, usersDao);
        registerDao(KeyDescription.class, keyDescriptionDao);
        registerDao(ImagesPath.class, imagesPathDao);
        registerDao(SaleInfo.class, saleInfoDao);
    }
    
    public void clear() {
        itemsDaoConfig.clearIdentityScope();
        usersDaoConfig.clearIdentityScope();
        keyDescriptionDaoConfig.clearIdentityScope();
        imagesPathDaoConfig.clearIdentityScope();
        saleInfoDaoConfig.clearIdentityScope();
    }

    public ItemsDao getItemsDao() {
        return itemsDao;
    }

    public UsersDao getUsersDao() {
        return usersDao;
    }

    public KeyDescriptionDao getKeyDescriptionDao() {
        return keyDescriptionDao;
    }

    public ImagesPathDao getImagesPathDao() {
        return imagesPathDao;
    }

    public SaleInfoDao getSaleInfoDao() {
        return saleInfoDao;
    }

}
